<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="214" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="2" invalid="0" date="2024-04-22" time="20:12:15">
  <environment os-version="10.0.19044" machine-name="JLA-LOFTHTPC" user-domain="JLA-LoftHTPC" cwd="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests" nunit-version="2.5.8.0" user="Owner" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition2" clr-version="Unknown" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Ignored" success="True" time="6.1996" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1" executed="True" result="Success" success="True" time="4.0318" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="function 'ConvertTo-ClassExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.2248" asserts="0" description="function 'ConvertTo-ClassExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ClassExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0379" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ClassExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1&quot;)" time="0.0379" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ClassExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.1358" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ClassExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1&quot;)" time="0.1358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-FileList.ps1'" executed="True" result="Success" success="True" time="0.2947" asserts="0" description="function 'ConvertTo-FileList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0554" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-FileList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1&quot;)" time="0.0554" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-FileList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1&quot;)" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-FileListDiv.ps1'" executed="True" result="Success" success="True" time="0.3289" asserts="0" description="function 'ConvertTo-FileListDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileListDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0242" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-FileListDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1&quot;)" time="0.0242" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileListDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-FileListDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1&quot;)" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-IgnoredDomainDiv.ps1'" executed="True" result="Success" success="True" time="0.3672" asserts="0" description="function 'ConvertTo-IgnoredDomainDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0234" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1&quot;)" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0064" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1&quot;)" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-MemberExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.4227" asserts="0" description="function 'ConvertTo-MemberExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-MemberExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0436" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-MemberExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1&quot;)" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-MemberExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0081" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-MemberExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1&quot;)" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-NameExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.4923" asserts="0" description="function 'ConvertTo-NameExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-NameExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0522" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-NameExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1&quot;)" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-NameExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0112" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-NameExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1&quot;)" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionGroup.ps1'" executed="True" result="Success" success="True" time="0.5431" asserts="0" description="function 'ConvertTo-PermissionGroup.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionGroup.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0333" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionGroup.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1&quot;)" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionGroup.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0118" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionGroup.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1&quot;)" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionList.ps1'" executed="True" result="Success" success="True" time="0.5726" asserts="0" description="function 'ConvertTo-PermissionList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0156" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1&quot;)" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0084" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1&quot;)" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-ScriptHtml.ps1'" executed="True" result="Success" success="True" time="0.6241" asserts="0" description="function 'ConvertTo-ScriptHtml.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ScriptHtml.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0371" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ScriptHtml.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1&quot;)" time="0.0371" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ScriptHtml.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0097" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ScriptHtml.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1&quot;)" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-AccountPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.6726" asserts="0" description="function 'Expand-AccountPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-AccountPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0338" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-AccountPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1&quot;)" time="0.0338" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1&quot;)" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-FlatPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.7367" asserts="0" description="function 'Expand-FlatPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-FlatPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0383" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-FlatPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1&quot;)" time="0.0383" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-FlatPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0198" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-FlatPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1&quot;)" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'" executed="True" result="Success" success="True" time="0.8494" asserts="0" description="function 'Expand-ItemPermissionAccountAccessReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0328" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1&quot;)" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0748" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1&quot;)" time="0.0748" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-ItemPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.885" asserts="0" description="function 'Expand-ItemPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0263" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-ItemPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1&quot;)" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0061" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1&quot;)" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-TargetPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.9324" asserts="0" description="function 'Expand-TargetPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-TargetPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0312" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-TargetPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1&quot;)" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0121" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1&quot;)" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-ColumnJson.ps1'" executed="True" result="Success" success="True" time="0.9703" asserts="0" description="function 'Get-ColumnJson.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ColumnJson.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0229" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ColumnJson.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1&quot;)" time="0.0229" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ColumnJson.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.008" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ColumnJson.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1&quot;)" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-DetailDivHeader.ps1'" executed="True" result="Success" success="True" time="1.0003" asserts="0" description="function 'Get-DetailDivHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-DetailDivHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0187" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-DetailDivHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1&quot;)" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-DetailDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-DetailDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1&quot;)" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-FolderPermissionTableHeader.ps1'" executed="True" result="Success" success="True" time="1.0846" asserts="0" description="function 'Get-FolderPermissionTableHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-FolderPermissionTableHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.042" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-FolderPermissionTableHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1&quot;)" time="0.042" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-FolderPermissionTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0367" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-FolderPermissionTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1&quot;)" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlBody.ps1'" executed="True" result="Success" success="True" time="1.1558" asserts="0" description="function 'Get-HtmlBody.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlBody.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0364" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlBody.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1&quot;)" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlBody.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0279" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlBody.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1&quot;)" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlReportElements.ps1'" executed="True" result="Success" success="True" time="1.2274" asserts="0" description="function 'Get-HtmlReportElements.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportElements.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0494" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlReportElements.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1&quot;)" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportElements.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0154" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlReportElements.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1&quot;)" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlReportFooter.ps1'" executed="True" result="Success" success="True" time="1.3011" asserts="0" description="function 'Get-HtmlReportFooter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportFooter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0548" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlReportFooter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1&quot;)" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportFooter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0104" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlReportFooter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1&quot;)" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-ReportDescription.ps1'" executed="True" result="Success" success="True" time="1.3693" asserts="0" description="function 'Get-ReportDescription.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ReportDescription.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0432" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ReportDescription.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1&quot;)" time="0.0432" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ReportDescription.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0186" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ReportDescription.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1&quot;)" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-SummaryDivHeader.ps1'" executed="True" result="Success" success="True" time="1.4281" asserts="0" description="function 'Get-SummaryDivHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryDivHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.035" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-SummaryDivHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1&quot;)" time="0.035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-SummaryDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-SummaryTableHeader.ps1'" executed="True" result="Success" success="True" time="1.5193" asserts="0" description="function 'Get-SummaryTableHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryTableHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0429" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-SummaryTableHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1&quot;)" time="0.0429" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0396" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-SummaryTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1&quot;)" time="0.0396" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-AccountPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.5712" asserts="0" description="function 'Group-AccountPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-AccountPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0349" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-AccountPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1&quot;)" time="0.0349" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-ItemPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.6376" asserts="0" description="function 'Group-ItemPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-ItemPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0508" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-ItemPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1&quot;)" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0108" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1&quot;)" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-TargetPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.6898" asserts="0" description="function 'Group-TargetPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-TargetPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0384" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-TargetPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1&quot;)" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0088" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1&quot;)" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Memory.ps1'" executed="True" result="Success" success="True" time="1.7558" asserts="0" description="function 'Memory.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Memory.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0503" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Memory.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1&quot;)" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Memory.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Memory.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Merge-AceAndPrincipal.ps1'" executed="True" result="Success" success="True" time="1.8123" asserts="0" description="function 'Merge-AceAndPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Merge-AceAndPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0381" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Merge-AceAndPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1&quot;)" time="0.0381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Merge-AceAndPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Merge-AceAndPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1&quot;)" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Out-PermissionDetailReport.ps1'" executed="True" result="Success" success="True" time="1.8747" asserts="0" description="function 'Out-PermissionDetailReport.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionDetailReport.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.037" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Out-PermissionDetailReport.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1&quot;)" time="0.037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionDetailReport.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0167" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Out-PermissionDetailReport.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1&quot;)" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-GroupByParameter.ps1'" executed="True" result="Success" success="True" time="1.9241" asserts="0" description="function 'Resolve-GroupByParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-GroupByParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0306" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-GroupByParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1&quot;)" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-GroupByParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0101" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-GroupByParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1&quot;)" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'" executed="True" result="Success" success="True" time="1.9549" asserts="0" description="function 'Resolve-IdentityReferenceDomainDNS.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1&quot;)" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0105" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1&quot;)" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-SplitByParameter.ps1'" executed="True" result="Success" success="True" time="2.0222" asserts="0" description="function 'Resolve-SplitByParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-SplitByParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0313" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-SplitByParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1&quot;)" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-SplitByParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0255" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-SplitByParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1&quot;)" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-AccountTableProperty.ps1'" executed="True" result="Success" success="True" time="2.123" asserts="0" description="function 'Select-AccountTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-AccountTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0514" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-AccountTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1&quot;)" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-AccountTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0446" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-AccountTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1&quot;)" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-ItemTableProperty.ps1'" executed="True" result="Success" success="True" time="2.2198" asserts="0" description="function 'Select-ItemTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-ItemTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0354" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-ItemTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1&quot;)" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-ItemTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.029" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-ItemTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1&quot;)" time="0.029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-PermissionTableProperty.ps1'" executed="True" result="Success" success="True" time="2.2766" asserts="0" description="function 'Select-PermissionTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0374" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-PermissionTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1&quot;)" time="0.0374" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0131" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-PermissionTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1&quot;)" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Add-CacheItem.ps1'" executed="True" result="Success" success="True" time="2.33" asserts="0" description="function 'Add-CacheItem.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Add-CacheItem.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0331" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Add-CacheItem.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1&quot;)" time="0.0331" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Add-CacheItem.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Add-CacheItem.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-ItemBlock.ps1'" executed="True" result="Success" success="True" time="2.3693" asserts="0" description="function 'ConvertTo-ItemBlock.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ItemBlock.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0287" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ItemBlock.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1&quot;)" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ItemBlock.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ItemBlock.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1&quot;)" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-Permission.ps1'" executed="True" result="Success" success="True" time="2.3901" asserts="0" description="function 'Expand-Permission.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-Permission.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0088" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-Permission.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1&quot;)" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-Permission.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0087" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-Permission.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1&quot;)" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-PermissionTarget.ps1'" executed="True" result="Success" success="True" time="2.4483" asserts="0" description="function 'Expand-PermissionTarget.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-PermissionTarget.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0381" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-PermissionTarget.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1&quot;)" time="0.0381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1&quot;)" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Find-ResolvedIDsWithAccess.ps1'" executed="True" result="Success" success="True" time="2.5014" asserts="0" description="function 'Find-ResolvedIDsWithAccess.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Find-ResolvedIDsWithAccess.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.043" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Find-ResolvedIDsWithAccess.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1&quot;)" time="0.043" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Find-ResolvedIDsWithAccess.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0056" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Find-ResolvedIDsWithAccess.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1&quot;)" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Find-ServerFqdn.ps1'" executed="True" result="Success" success="True" time="2.5428" asserts="0" description="function 'Find-ServerFqdn.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Find-ServerFqdn.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0302" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Find-ServerFqdn.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1&quot;)" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Find-ServerFqdn.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Find-ServerFqdn.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1&quot;)" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Format-Permission.ps1'" executed="True" result="Success" success="True" time="2.569" asserts="0" description="function 'Format-Permission.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Format-Permission.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0115" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Format-Permission.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1&quot;)" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Format-Permission.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0103" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Format-Permission.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1&quot;)" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Format-TimeSpan.ps1'" executed="True" result="Success" success="True" time="2.6163" asserts="0" description="function 'Format-TimeSpan.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Format-TimeSpan.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0299" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Format-TimeSpan.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1&quot;)" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Format-TimeSpan.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0087" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Format-TimeSpan.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1&quot;)" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-AccessControlList.ps1'" executed="True" result="Success" success="True" time="2.6707" asserts="0" description="function 'Get-AccessControlList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-AccessControlList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0361" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-AccessControlList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0128" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CachedCimInstance.ps1'" executed="True" result="Success" success="True" time="2.6952" asserts="0" description="function 'Get-CachedCimInstance.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimInstance.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0085" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CachedCimInstance.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1&quot;)" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CachedCimSession.ps1'" executed="True" result="Success" success="True" time="2.7232" asserts="0" description="function 'Get-CachedCimSession.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimSession.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0155" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CachedCimSession.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1&quot;)" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1&quot;)" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-PermissionPrincipal.ps1'" executed="True" result="Success" success="True" time="2.7847" asserts="0" description="function 'Get-PermissionPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0411" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-PermissionPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1&quot;)" time="0.0411" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0104" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1&quot;)" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-PrtgXmlSensorOutput.ps1'" executed="True" result="Success" success="True" time="2.8693" asserts="0" description="function 'Get-PrtgXmlSensorOutput.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-PrtgXmlSensorOutput.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.063" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-PrtgXmlSensorOutput.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PrtgXmlSensorOutput.ps1&quot;)" time="0.063" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-PrtgXmlSensorOutput.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0166" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-PrtgXmlSensorOutput.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PrtgXmlSensorOutput.ps1&quot;)" time="0.0166" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-TimeZoneName.ps1'" executed="True" result="Success" success="True" time="2.9611" asserts="0" description="function 'Get-TimeZoneName.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-TimeZoneName.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0391" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-TimeZoneName.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1&quot;)" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-TimeZoneName.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0425" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-TimeZoneName.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1&quot;)" time="0.0425" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Initialize-Cache.ps1'" executed="True" result="Success" success="True" time="3.021" asserts="0" description="function 'Initialize-Cache.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Initialize-Cache.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0372" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Initialize-Cache.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1&quot;)" time="0.0372" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Initialize-Cache.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0177" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Initialize-Cache.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1&quot;)" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Invoke-PermissionCommand.ps1'" executed="True" result="Success" success="True" time="3.0524" asserts="0" description="function 'Invoke-PermissionCommand.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionCommand.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0126" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Invoke-PermissionCommand.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1&quot;)" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionCommand.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0079" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Invoke-PermissionCommand.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1&quot;)" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Out-PermissionReport.ps1'" executed="True" result="Success" success="True" time="3.1041" asserts="0" description="function 'Out-PermissionReport.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionReport.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0304" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Out-PermissionReport.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionReport.ps1&quot;)" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionReport.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0169" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Out-PermissionReport.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionReport.ps1&quot;)" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Remove-CachedCimSession.ps1'" executed="True" result="Success" success="True" time="3.148" asserts="0" description="function 'Remove-CachedCimSession.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Remove-CachedCimSession.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0292" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Remove-CachedCimSession.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1&quot;)" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Remove-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Remove-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-AccessControlList.ps1'" executed="True" result="Success" success="True" time="3.1832" asserts="0" description="function 'Resolve-AccessControlList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-AccessControlList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-AccessControlList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0124" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1&quot;)" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Ace.ps1'" executed="True" result="Success" success="True" time="3.2276" asserts="0" description="function 'Resolve-Ace.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Ace.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0319" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Ace.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Ace.ps1&quot;)" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Ace.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0081" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Ace.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Ace.ps1&quot;)" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Acl.ps1'" executed="True" result="Success" success="True" time="3.2522" asserts="0" description="function 'Resolve-Acl.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Acl.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Acl.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Acl.ps1&quot;)" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Acl.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0072" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Acl.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Acl.ps1&quot;)" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Folder.ps1'" executed="True" result="Success" success="True" time="3.2763" asserts="0" description="function 'Resolve-Folder.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Folder.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0093" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Folder.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Folder.ps1&quot;)" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Folder.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Folder.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Folder.ps1&quot;)" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-FormatParameter.ps1'" executed="True" result="Success" success="True" time="3.3197" asserts="0" description="function 'Resolve-FormatParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-FormatParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0329" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-FormatParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-FormatParameter.ps1&quot;)" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-FormatParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0064" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-FormatParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-FormatParameter.ps1&quot;)" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-PermissionTarget.ps1'" executed="True" result="Success" success="True" time="3.3861" asserts="0" description="function 'Resolve-PermissionTarget.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-PermissionTarget.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0079" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-PermissionTarget.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1&quot;)" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0456" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1&quot;)" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-PermissionPrincipal.ps1'" executed="True" result="Success" success="True" time="3.4202" asserts="0" description="function 'Select-PermissionPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0075" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-PermissionPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1&quot;)" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0191" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1&quot;)" time="0.0191" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1" executed="True" result="Ignored" success="True" time="0.3093" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="module manifest 'Permission.psd1'" executed="True" result="Success" success="True" time="0.0772" asserts="0" description="module manifest 'Permission.psd1'">
            <results>
              <test-suite type="TestFixture" name="module manifest 'Permission.psd1'.- Validation" executed="True" result="Success" success="True" time="0.0746" asserts="0" description="module manifest 'Permission.psd1'.- Validation">
                <results>
                  <test-case description="is a valid manifest" name="module manifest 'Permission.psd1'.- Validation.is a valid manifest" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid name in the manifest" name="module manifest 'Permission.psd1'.- Validation.has a valid name in the manifest" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid root module" name="module manifest 'Permission.psd1'.- Validation.has a valid root module" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid version" name="module manifest 'Permission.psd1'.- Validation.has a valid version" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid description" name="module manifest 'Permission.psd1'.- Validation.has a valid description" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid author" name="module manifest 'Permission.psd1'.- Validation.has a valid author" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid guid" name="module manifest 'Permission.psd1'.- Validation.has a valid guid" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid copyright" name="module manifest 'Permission.psd1'.- Validation.has a valid copyright" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Git tagging" executed="True" result="Ignored" success="True" time="0.0918" asserts="0" description="Git tagging">
            <results>
              <test-suite type="TestFixture" name="Git tagging.- Git tag version ''" executed="True" result="Ignored" success="True" time="0.0124" asserts="0" description="Git tagging.- Git tag version ''">
                <results>
                  <test-case description="is a valid version" name="Git tagging.- Git tag version ''.is a valid version" time="0.0066" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="matches the module manifest version" name="Git tagging.- Git tag version ''.matches the module manifest version" time="0.0032" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1" executed="True" result="Success" success="True" time="0.3334" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="text files" executed="True" result="Success" success="True" time="0.0194" asserts="0" description="text files">
            <results>
              <test-suite type="TestFixture" name="text files.- File Encoding" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="text files.- File Encoding">
                <results>
                  <test-case description="do not use Unicode/UTF-16 encoding" name="text files.- File Encoding.do not use Unicode/UTF-16 encoding" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="text files.- Indentations" executed="True" result="Success" success="True" time="0.0151" asserts="0" description="text files.- Indentations">
                <results>
                  <test-case description="do not use tabs for indentations" name="text files.- Indentations.do not use tabs for indentations" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1" executed="True" result="Success" success="True" time="1.0852" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="'Permission.psd1' Module Manifest Tests" executed="True" result="Success" success="True" time="0.1658" asserts="0" description="'Permission.psd1' Module Manifest Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission.psd1' Module Manifest Tests.Module manifest 'Permission.psd1' passes Test-ModuleManifest" executed="True" result="Success" success="True" time="0.1629" asserts="0" description="Module manifest 'Permission.psd1' passes Test-ModuleManifest">
                <results>
                  <test-case description="Module manifest 'Permission.psd1' passes Test-ModuleManifest" name="'Permission.psd1' Module Manifest Tests.Module manifest 'Permission.psd1' passes Test-ModuleManifest(E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psd1)" time="0.1629" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="'Permission' Function Tests" executed="True" result="Success" success="True" time="0.8806" asserts="0" description="'Permission' Function Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission' Function Tests.Script '&lt;Script&gt;' is valid PowerShell" executed="True" result="Success" success="True" time="0.7049" asserts="0" description="Script '&lt;Script&gt;' is valid PowerShell">
                <results>
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psd1' is valid PowerShell" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psm1' is valid PowerShell" time="0.0909" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1' is valid PowerShell" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1' is valid PowerShell" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1' is valid PowerShell" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1' is valid PowerShell" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1' is valid PowerShell" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1' is valid PowerShell" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1' is valid PowerShell" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1' is valid PowerShell" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1' is valid PowerShell" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1' is valid PowerShell" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1' is valid PowerShell" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1' is valid PowerShell" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1' is valid PowerShell" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1' is valid PowerShell" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1' is valid PowerShell" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1' is valid PowerShell" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1' is valid PowerShell" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1' is valid PowerShell" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1' is valid PowerShell" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1' is valid PowerShell" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1' is valid PowerShell" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1' is valid PowerShell" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1' is valid PowerShell" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1' is valid PowerShell" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1' is valid PowerShell" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1' is valid PowerShell" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1' is valid PowerShell" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1' is valid PowerShell" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1' is valid PowerShell" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1' is valid PowerShell" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1' is valid PowerShell" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1' is valid PowerShell" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1' is valid PowerShell" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1' is valid PowerShell" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1' is valid PowerShell" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1' is valid PowerShell" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' is valid PowerShell" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1' is valid PowerShell" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1' is valid PowerShell" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1' is valid PowerShell" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PrtgXmlSensorOutput.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PrtgXmlSensorOutput.ps1' is valid PowerShell" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1' is valid PowerShell" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1' is valid PowerShell" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1' is valid PowerShell" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionReport.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionReport.ps1' is valid PowerShell" time="0.0196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1' is valid PowerShell" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1' is valid PowerShell" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Ace.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Ace.ps1' is valid PowerShell" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Acl.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Acl.ps1' is valid PowerShell" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Folder.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-Folder.ps1' is valid PowerShell" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-FormatParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-FormatParameter.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1' is valid PowerShell" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1' is valid PowerShell" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psd1' is valid PowerShell" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psm1' is valid PowerShell" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1' is valid PowerShell" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Help.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Help.tests.ps1' is valid PowerShell" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1' is valid PowerShell" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1' is valid PowerShell" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\MetaFixers.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\MetaFixers.psm1' is valid PowerShell" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1' is valid PowerShell" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1' is valid PowerShell" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\ScriptAnalyzerSettings.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\ScriptAnalyzerSettings.psd1' is valid PowerShell" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\build.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\build.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psakeFile.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psakeFile.ps1' is valid PowerShell" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psdependRequirements.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psdependRequirements.psd1' is valid PowerShell" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="'Permission.psm1' Module Tests" executed="True" result="Success" success="True" time="0.9145" asserts="0" description="'Permission.psm1' Module Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission.psm1' Module Tests.Module file '&lt;ThisModule&gt;' can be imported without any errors" executed="True" result="Success" success="True" time="0.0288" asserts="0" description="Module file '&lt;ThisModule&gt;' can be imported without any errors">
                <results>
                  <test-case description="Module file 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psm1' can be imported without any errors" name="'Permission.psm1' Module Tests.Module file 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.644\Permission\Permission.psm1' can be imported without any errors" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1" executed="True" result="Success" success="True" time="0.1595" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="change log" executed="True" result="Success" success="True" time="0.0219" asserts="0" description="change log">
            <results>
              <test-suite type="TestFixture" name="change log.- Version" executed="True" result="Success" success="True" time="0.0195" asserts="0" description="change log.- Version">
                <results>
                  <test-case description="has a valid version" name="change log.- Version.has a valid version" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the same version as the manifest" name="change log.- Version.has the same version as the manifest" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1" executed="True" result="Success" success="True" time="0.1648" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="'Get-AccessControlList.ps1' Function Tests" executed="True" result="Success" success="True" time="0.0581" asserts="0" description="'Get-AccessControlList.ps1' Function Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Get-AccessControlList.ps1' Function Tests.Script file 'Get-AccessControlList.ps1' runs without any errors" executed="True" result="Success" success="True" time="0.019" asserts="0" description="Script file 'Get-AccessControlList.ps1' runs without any errors">
                <results>
                  <test-case description="Script file 'Get-AccessControlList.ps1' runs without any errors" name="'Get-AccessControlList.ps1' Function Tests.Script file 'Get-AccessControlList.ps1' runs without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="'Get-AccessControlList.ps1' Function Tests.Script '&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0363" asserts="0" description="Script '&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' can be tokenized by the PowerShell parser without any errors" name="'Get-AccessControlList.ps1' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' can be tokenized by the PowerShell parser without any errors" time="0.0363" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>