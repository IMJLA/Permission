<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="244" errors="0" failures="1" not-run="0" inconclusive="0" ignored="0" skipped="2" invalid="0" date="2024-11-10" time="10:40:55">
  <environment os-version="10.0.19044" clr-version="8.0.4" cwd="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests" user="Owner" machine-name="JLA-LOFTHTPC" nunit-version="2.5.8.0" user-domain="JLA-LoftHTPC" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition2" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="6.7352" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1" executed="True" result="Success" success="True" time="4.1342" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="function 'ConvertTo-ClassExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.2415" asserts="0" description="function 'ConvertTo-ClassExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ClassExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0361" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ClassExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1&quot;)" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ClassExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.1497" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ClassExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1&quot;)" time="0.1497" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-FileList.ps1'" executed="True" result="Success" success="True" time="0.2824" asserts="0" description="function 'ConvertTo-FileList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0142" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-FileList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1&quot;)" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0117" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-FileList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1&quot;)" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-FileListDiv.ps1'" executed="True" result="Success" success="True" time="0.3108" asserts="0" description="function 'ConvertTo-FileListDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileListDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0113" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-FileListDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1&quot;)" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-FileListDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-FileListDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1&quot;)" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-IgnoredDomainDiv.ps1'" executed="True" result="Success" success="True" time="0.3701" asserts="0" description="function 'ConvertTo-IgnoredDomainDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0162" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1&quot;)" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0078" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-IgnoredDomainDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1&quot;)" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-MemberExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.4428" asserts="0" description="function 'ConvertTo-MemberExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-MemberExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.025" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-MemberExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1&quot;)" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-MemberExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0375" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-MemberExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1&quot;)" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-NameExclusionDiv.ps1'" executed="True" result="Success" success="True" time="0.4885" asserts="0" description="function 'ConvertTo-NameExclusionDiv.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-NameExclusionDiv.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0105" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-NameExclusionDiv.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1&quot;)" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-NameExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0197" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-NameExclusionDiv.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1&quot;)" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionGroup.ps1'" executed="True" result="Success" success="True" time="0.5394" asserts="0" description="function 'ConvertTo-PermissionGroup.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionGroup.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionGroup.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1&quot;)" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionGroup.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionGroup.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionList.ps1'" executed="True" result="Success" success="True" time="0.6168" asserts="0" description="function 'ConvertTo-PermissionList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0183" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1&quot;)" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0416" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1&quot;)" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionPrtgXml.ps1'" executed="True" result="Success" success="True" time="0.6799" asserts="0" description="function 'ConvertTo-PermissionPrtgXml.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionPrtgXml.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0215" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionPrtgXml.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionPrtgXml.ps1&quot;)" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionPrtgXml.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.019" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionPrtgXml.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionPrtgXml.ps1&quot;)" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-ScriptHtml.ps1'" executed="True" result="Success" success="True" time="0.7229" asserts="0" description="function 'ConvertTo-ScriptHtml.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ScriptHtml.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0182" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ScriptHtml.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1&quot;)" time="0.0182" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ScriptHtml.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0091" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ScriptHtml.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1&quot;)" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-AccountPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.7628" asserts="0" description="function 'Expand-AccountPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-AccountPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0137" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-AccountPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1&quot;)" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0135" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1&quot;)" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-FlatPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.8058" asserts="0" description="function 'Expand-FlatPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-FlatPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0135" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-FlatPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1&quot;)" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-FlatPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0186" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-FlatPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1&quot;)" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'" executed="True" result="Success" success="True" time="0.8476" asserts="0" description="function 'Expand-ItemPermissionAccountAccessReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0134" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1&quot;)" time="0.0134" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0113" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-ItemPermissionAccountAccessReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1&quot;)" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-ItemPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.881" asserts="0" description="function 'Expand-ItemPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0127" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-ItemPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1&quot;)" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0084" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1&quot;)" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-TargetPermissionReference.ps1'" executed="True" result="Success" success="True" time="0.9131" asserts="0" description="function 'Expand-TargetPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-TargetPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0109" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-TargetPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1&quot;)" time="0.0109" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.012" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1&quot;)" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-ColumnJson.ps1'" executed="True" result="Success" success="True" time="0.9391" asserts="0" description="function 'Get-ColumnJson.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ColumnJson.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0115" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ColumnJson.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1&quot;)" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ColumnJson.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ColumnJson.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1&quot;)" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-DetailDivHeader.ps1'" executed="True" result="Success" success="True" time="1.0479" asserts="0" description="function 'Get-DetailDivHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-DetailDivHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0784" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-DetailDivHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1&quot;)" time="0.0784" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-DetailDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0195" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-DetailDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1&quot;)" time="0.0195" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-FolderPermissionTableHeader.ps1'" executed="True" result="Success" success="True" time="1.1087" asserts="0" description="function 'Get-FolderPermissionTableHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-FolderPermissionTableHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0138" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-FolderPermissionTableHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1&quot;)" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-FolderPermissionTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0382" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-FolderPermissionTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1&quot;)" time="0.0382" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlBody.ps1'" executed="True" result="Success" success="True" time="1.1475" asserts="0" description="function 'Get-HtmlBody.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlBody.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlBody.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlBody.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0135" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlBody.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1&quot;)" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlReportElements.ps1'" executed="True" result="Success" success="True" time="1.19" asserts="0" description="function 'Get-HtmlReportElements.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportElements.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0184" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlReportElements.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1&quot;)" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportElements.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0157" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlReportElements.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1&quot;)" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-HtmlReportFooter.ps1'" executed="True" result="Success" success="True" time="1.2295" asserts="0" description="function 'Get-HtmlReportFooter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportFooter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0138" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-HtmlReportFooter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1&quot;)" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-HtmlReportFooter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0148" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-HtmlReportFooter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1&quot;)" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-ReportDescription.ps1'" executed="True" result="Success" success="True" time="1.274" asserts="0" description="function 'Get-ReportDescription.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-ReportDescription.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-ReportDescription.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-ReportDescription.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0198" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-ReportDescription.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1&quot;)" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-SummaryDivHeader.ps1'" executed="True" result="Success" success="True" time="1.3415" asserts="0" description="function 'Get-SummaryDivHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryDivHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0179" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-SummaryDivHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1&quot;)" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0148" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-SummaryDivHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1&quot;)" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-SummaryTableHeader.ps1'" executed="True" result="Success" success="True" time="1.3891" asserts="0" description="function 'Get-SummaryTableHeader.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryTableHeader.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-SummaryTableHeader.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1&quot;)" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-SummaryTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.021" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-SummaryTableHeader.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1&quot;)" time="0.021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-AccountPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.4246" asserts="0" description="function 'Group-AccountPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-AccountPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0143" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-AccountPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1&quot;)" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0126" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-AccountPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1&quot;)" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-ItemPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.4673" asserts="0" description="function 'Group-ItemPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-ItemPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0186" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-ItemPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1&quot;)" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0132" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-ItemPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1&quot;)" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Group-TargetPermissionReference.ps1'" executed="True" result="Success" success="True" time="1.5094" asserts="0" description="function 'Group-TargetPermissionReference.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Group-TargetPermissionReference.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0158" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Group-TargetPermissionReference.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1&quot;)" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Group-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0132" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Group-TargetPermissionReference.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1&quot;)" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Memory.ps1'" executed="True" result="Success" success="True" time="1.5545" asserts="0" description="function 'Memory.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Memory.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Memory.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Memory.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0104" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Memory.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1&quot;)" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Merge-AceAndPrincipal.ps1'" executed="True" result="Success" success="True" time="1.5869" asserts="0" description="function 'Merge-AceAndPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Merge-AceAndPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0137" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Merge-AceAndPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1&quot;)" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Merge-AceAndPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0101" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Merge-AceAndPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1&quot;)" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'New-PermissionCacheRef.ps1'" executed="True" result="Success" success="True" time="1.617" asserts="0" description="function 'New-PermissionCacheRef.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'New-PermissionCacheRef.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0075" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'New-PermissionCacheRef.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\New-PermissionCacheRef.ps1&quot;)" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'New-PermissionCacheRef.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0113" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'New-PermissionCacheRef.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\New-PermissionCacheRef.ps1&quot;)" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Out-PermissionDetailReport.ps1'" executed="True" result="Success" success="True" time="1.67" asserts="0" description="function 'Out-PermissionDetailReport.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionDetailReport.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0163" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Out-PermissionDetailReport.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1&quot;)" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionDetailReport.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0073" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Out-PermissionDetailReport.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1&quot;)" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Ace.ps1'" executed="True" result="Success" success="True" time="1.7207" asserts="0" description="function 'Resolve-Ace.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Ace.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0151" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Ace.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Ace.ps1&quot;)" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Ace.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0263" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Ace.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Ace.ps1&quot;)" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Acl.ps1'" executed="True" result="Success" success="True" time="1.8038" asserts="0" description="function 'Resolve-Acl.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Acl.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0168" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Acl.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Acl.ps1&quot;)" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Acl.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Acl.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Acl.ps1&quot;)" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-Folder.ps1'" executed="True" result="Success" success="True" time="1.8847" asserts="0" description="function 'Resolve-Folder.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Folder.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0346" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-Folder.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Folder.ps1&quot;)" time="0.0346" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-Folder.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0293" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-Folder.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Folder.ps1&quot;)" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-FormatParameter.ps1'" executed="True" result="Success" success="True" time="1.9651" asserts="0" description="function 'Resolve-FormatParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-FormatParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0203" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-FormatParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-FormatParameter.ps1&quot;)" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-FormatParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0461" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-FormatParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-FormatParameter.ps1&quot;)" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-GroupByParameter.ps1'" executed="True" result="Success" success="True" time="2.0045" asserts="0" description="function 'Resolve-GroupByParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-GroupByParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0167" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-GroupByParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1&quot;)" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-GroupByParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0143" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-GroupByParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1&quot;)" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'" executed="True" result="Success" success="True" time="2.0594" asserts="0" description="function 'Resolve-IdentityReferenceDomainDNS.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0154" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1&quot;)" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.028" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-IdentityReferenceDomainDNS.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1&quot;)" time="0.028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-SplitByParameter.ps1'" executed="True" result="Success" success="True" time="2.1079" asserts="0" description="function 'Resolve-SplitByParameter.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-SplitByParameter.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0149" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-SplitByParameter.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1&quot;)" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-SplitByParameter.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0184" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-SplitByParameter.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1&quot;)" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-AccountTableProperty.ps1'" executed="True" result="Success" success="True" time="2.1508" asserts="0" description="function 'Select-AccountTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-AccountTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0138" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-AccountTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1&quot;)" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-AccountTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0164" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-AccountTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1&quot;)" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-ItemTableProperty.ps1'" executed="True" result="Success" success="True" time="2.1878" asserts="0" description="function 'Select-ItemTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-ItemTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0108" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-ItemTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1&quot;)" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-ItemTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0168" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-ItemTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1&quot;)" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-PermissionTableProperty.ps1'" executed="True" result="Success" success="True" time="2.224" asserts="0" description="function 'Select-PermissionTableProperty.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionTableProperty.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0139" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-PermissionTableProperty.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1&quot;)" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0124" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-PermissionTableProperty.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1&quot;)" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Add-CachedCimInstance.ps1'" executed="True" result="Success" success="True" time="2.2631" asserts="0" description="function 'Add-CachedCimInstance.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Add-CachedCimInstance.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0164" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Add-CachedCimInstance.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CachedCimInstance.ps1&quot;)" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Add-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.011" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Add-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CachedCimInstance.ps1&quot;)" time="0.011" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Add-CacheItem.ps1'" executed="True" result="Success" success="True" time="2.2915" asserts="0" description="function 'Add-CacheItem.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Add-CacheItem.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0106" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Add-CacheItem.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1&quot;)" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Add-CacheItem.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Add-CacheItem.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1&quot;)" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Add-PermissionCacheItem.ps1'" executed="True" result="Success" success="True" time="2.3372" asserts="0" description="function 'Add-PermissionCacheItem.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Add-PermissionCacheItem.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.012" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Add-PermissionCacheItem.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-PermissionCacheItem.ps1&quot;)" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Add-PermissionCacheItem.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0211" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Add-PermissionCacheItem.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-PermissionCacheItem.ps1&quot;)" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-ItemBlock.ps1'" executed="True" result="Success" success="True" time="2.38" asserts="0" description="function 'ConvertTo-ItemBlock.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ItemBlock.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0149" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-ItemBlock.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1&quot;)" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-ItemBlock.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0127" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-ItemBlock.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1&quot;)" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'ConvertTo-PermissionFqdn.ps1'" executed="True" result="Success" success="True" time="2.4273" asserts="0" description="function 'ConvertTo-PermissionFqdn.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionFqdn.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0281" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'ConvertTo-PermissionFqdn.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-PermissionFqdn.ps1&quot;)" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'ConvertTo-PermissionFqdn.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'ConvertTo-PermissionFqdn.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-PermissionFqdn.ps1&quot;)" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-Permission.ps1'" executed="True" result="Success" success="True" time="2.4841" asserts="0" description="function 'Expand-Permission.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-Permission.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0181" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-Permission.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1&quot;)" time="0.0181" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-Permission.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0221" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-Permission.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1&quot;)" time="0.0221" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Expand-PermissionTarget.ps1'" executed="True" result="Success" success="True" time="2.5586" asserts="0" description="function 'Expand-PermissionTarget.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Expand-PermissionTarget.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0221" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Expand-PermissionTarget.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1&quot;)" time="0.0221" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Expand-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0302" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Expand-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1&quot;)" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Find-CachedCimInstance.ps1'" executed="True" result="Success" success="True" time="2.6241" asserts="0" description="function 'Find-CachedCimInstance.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Find-CachedCimInstance.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0117" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Find-CachedCimInstance.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-CachedCimInstance.ps1&quot;)" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Find-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0333" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Find-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-CachedCimInstance.ps1&quot;)" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Find-ResolvedIDsWithAccess.ps1'" executed="True" result="Success" success="True" time="2.7061" asserts="0" description="function 'Find-ResolvedIDsWithAccess.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Find-ResolvedIDsWithAccess.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.028" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Find-ResolvedIDsWithAccess.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1&quot;)" time="0.028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Find-ResolvedIDsWithAccess.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0374" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Find-ResolvedIDsWithAccess.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1&quot;)" time="0.0374" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Find-ServerFqdn.ps1'" executed="True" result="Success" success="True" time="2.7581" asserts="0" description="function 'Find-ServerFqdn.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Find-ServerFqdn.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0169" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Find-ServerFqdn.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1&quot;)" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Find-ServerFqdn.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0136" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Find-ServerFqdn.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1&quot;)" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Format-Permission.ps1'" executed="True" result="Success" success="True" time="2.8289" asserts="0" description="function 'Format-Permission.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Format-Permission.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0294" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Format-Permission.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1&quot;)" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Format-Permission.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0249" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Format-Permission.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1&quot;)" time="0.0249" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Format-TimeSpan.ps1'" executed="True" result="Success" success="True" time="2.8811" asserts="0" description="function 'Format-TimeSpan.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Format-TimeSpan.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Format-TimeSpan.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1&quot;)" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Format-TimeSpan.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0247" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Format-TimeSpan.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1&quot;)" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-AccessControlList.ps1'" executed="True" result="Success" success="True" time="2.9267" asserts="0" description="function 'Get-AccessControlList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-AccessControlList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.015" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-AccessControlList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0225" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.0225" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CachedCimInstance.ps1'" executed="True" result="Success" success="True" time="2.973" asserts="0" description="function 'Get-CachedCimInstance.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimInstance.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0146" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CachedCimInstance.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1&quot;)" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0183" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CachedCimInstance.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1&quot;)" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-CachedCimSession.ps1'" executed="True" result="Success" success="True" time="3.0089" asserts="0" description="function 'Get-CachedCimSession.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimSession.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0116" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-CachedCimSession.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1&quot;)" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0175" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1&quot;)" time="0.0175" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-PermissionPrincipal.ps1'" executed="True" result="Success" success="True" time="3.0434" asserts="0" description="function 'Get-PermissionPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.013" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-PermissionPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1&quot;)" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0107" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1&quot;)" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-PermissionTrustedDomain.ps1'" executed="True" result="Success" success="True" time="3.0927" asserts="0" description="function 'Get-PermissionTrustedDomain.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionTrustedDomain.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0167" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-PermissionTrustedDomain.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionTrustedDomain.ps1&quot;)" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionTrustedDomain.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0161" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-PermissionTrustedDomain.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionTrustedDomain.ps1&quot;)" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-PermissionWhoAmI.ps1'" executed="True" result="Success" success="True" time="3.1298" asserts="0" description="function 'Get-PermissionWhoAmI.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionWhoAmI.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0122" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-PermissionWhoAmI.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionWhoAmI.ps1&quot;)" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-PermissionWhoAmI.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-PermissionWhoAmI.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionWhoAmI.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Get-TimeZoneName.ps1'" executed="True" result="Success" success="True" time="3.1671" asserts="0" description="function 'Get-TimeZoneName.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Get-TimeZoneName.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0093" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Get-TimeZoneName.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1&quot;)" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Get-TimeZoneName.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.015" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Get-TimeZoneName.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1&quot;)" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Initialize-Cache.ps1'" executed="True" result="Success" success="True" time="3.205" asserts="0" description="function 'Initialize-Cache.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Initialize-Cache.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.014" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Initialize-Cache.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1&quot;)" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Initialize-Cache.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Initialize-Cache.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1&quot;)" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Invoke-PermissionAnalyzer.ps1'" executed="True" result="Success" success="True" time="3.2413" asserts="0" description="function 'Invoke-PermissionAnalyzer.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionAnalyzer.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0192" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Invoke-PermissionAnalyzer.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionAnalyzer.ps1&quot;)" time="0.0192" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionAnalyzer.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0101" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Invoke-PermissionAnalyzer.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionAnalyzer.ps1&quot;)" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Invoke-PermissionCommand.ps1'" executed="True" result="Success" success="True" time="3.2711" asserts="0" description="function 'Invoke-PermissionCommand.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionCommand.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Invoke-PermissionCommand.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Invoke-PermissionCommand.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0105" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Invoke-PermissionCommand.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1&quot;)" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'New-PermissionCache.ps1'" executed="True" result="Success" success="True" time="3.3094" asserts="0" description="function 'New-PermissionCache.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'New-PermissionCache.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0124" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'New-PermissionCache.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\New-PermissionCache.ps1&quot;)" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'New-PermissionCache.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0169" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'New-PermissionCache.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\New-PermissionCache.ps1&quot;)" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Out-Permission.ps1'" executed="True" result="Success" success="True" time="3.3391" asserts="0" description="function 'Out-Permission.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Out-Permission.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0126" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Out-Permission.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-Permission.ps1&quot;)" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Out-Permission.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Out-Permission.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-Permission.ps1&quot;)" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Out-PermissionFile.ps1'" executed="True" result="Success" success="True" time="3.3825" asserts="0" description="function 'Out-PermissionFile.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionFile.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Out-PermissionFile.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionFile.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Out-PermissionFile.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.017" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Out-PermissionFile.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionFile.ps1&quot;)" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Remove-CachedCimSession.ps1'" executed="True" result="Success" success="True" time="3.4066" asserts="0" description="function 'Remove-CachedCimSession.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Remove-CachedCimSession.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0098" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Remove-CachedCimSession.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1&quot;)" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Remove-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0074" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Remove-CachedCimSession.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1&quot;)" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-AccessControlList.ps1'" executed="True" result="Success" success="True" time="3.4429" asserts="0" description="function 'Resolve-AccessControlList.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-AccessControlList.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0119" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-AccessControlList.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1&quot;)" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-AccessControlList.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Resolve-PermissionTarget.ps1'" executed="True" result="Success" success="True" time="3.4725" asserts="0" description="function 'Resolve-PermissionTarget.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Resolve-PermissionTarget.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Resolve-PermissionTarget.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1&quot;)" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Resolve-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Resolve-PermissionTarget.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1&quot;)" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="function 'Select-PermissionPrincipal.ps1'" executed="True" result="Success" success="True" time="3.5142" asserts="0" description="function 'Select-PermissionPrincipal.ps1'">
            <results>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionPrincipal.ps1'.runs without throwing errors" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="runs without throwing errors">
                <results>
                  <test-case description="runs without throwing errors" name="function 'Select-PermissionPrincipal.ps1'.runs without throwing errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1&quot;)" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="function 'Select-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.016" asserts="0" description="can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="can be tokenized by the PowerShell parser without any errors" name="function 'Select-PermissionPrincipal.ps1'.can be tokenized by the PowerShell parser without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1&quot;)" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1" executed="True" result="Ignored" success="True" time="0.3413" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="module manifest 'Permission.psd1'" executed="True" result="Success" success="True" time="0.0949" asserts="0" description="module manifest 'Permission.psd1'">
            <results>
              <test-suite type="TestFixture" name="module manifest 'Permission.psd1'.- Validation" executed="True" result="Success" success="True" time="0.0877" asserts="0" description="module manifest 'Permission.psd1'.- Validation">
                <results>
                  <test-case description="is a valid manifest" name="module manifest 'Permission.psd1'.- Validation.is a valid manifest" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid name in the manifest" name="module manifest 'Permission.psd1'.- Validation.has a valid name in the manifest" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid root module" name="module manifest 'Permission.psd1'.- Validation.has a valid root module" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid version" name="module manifest 'Permission.psd1'.- Validation.has a valid version" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid description" name="module manifest 'Permission.psd1'.- Validation.has a valid description" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid author" name="module manifest 'Permission.psd1'.- Validation.has a valid author" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid guid" name="module manifest 'Permission.psd1'.- Validation.has a valid guid" time="0.0174" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has a valid copyright" name="module manifest 'Permission.psd1'.- Validation.has a valid copyright" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Git tagging" executed="True" result="Ignored" success="True" time="0.1198" asserts="0" description="Git tagging">
            <results>
              <test-suite type="TestFixture" name="Git tagging.- Git tag version ''" executed="True" result="Ignored" success="True" time="0.0175" asserts="0" description="Git tagging.- Git tag version ''">
                <results>
                  <test-case description="is a valid version" name="Git tagging.- Git tag version ''.is a valid version" time="0.0074" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="matches the module manifest version" name="Git tagging.- Git tag version ''.matches the module manifest version" time="0.002" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1" executed="True" result="Failure" success="False" time="0.6019" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="text files" executed="True" result="Failure" success="False" time="0.1188" asserts="0" description="text files">
            <results>
              <test-suite type="TestFixture" name="text files.- File Encoding" executed="True" result="Success" success="True" time="0.0204" asserts="0" description="text files.- File Encoding">
                <results>
                  <test-case description="do not use Unicode/UTF-16 encoding" name="text files.- File Encoding.do not use Unicode/UTF-16 encoding" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="text files.- Indentations" executed="True" result="Failure" success="False" time="0.1068" asserts="0" description="text files.- Indentations">
                <results>
                  <test-case description="do not use tabs for indentations" name="text files.- Indentations.do not use tabs for indentations" time="0.0786" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 0, but got 2.</message>
                      <stack-trace>at $totalTabsCount | Should -Be 0, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1:47
at &lt;ScriptBlock&gt;, E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1:47</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1" executed="True" result="Success" success="True" time="1.1486" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="'Permission.psd1' Module Manifest Tests" executed="True" result="Success" success="True" time="0.1306" asserts="0" description="'Permission.psd1' Module Manifest Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission.psd1' Module Manifest Tests.Module manifest 'Permission.psd1' passes Test-ModuleManifest" executed="True" result="Success" success="True" time="0.1192" asserts="0" description="Module manifest 'Permission.psd1' passes Test-ModuleManifest">
                <results>
                  <test-case description="Module manifest 'Permission.psd1' passes Test-ModuleManifest" name="'Permission.psd1' Module Manifest Tests.Module manifest 'Permission.psd1' passes Test-ModuleManifest(E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psd1)" time="0.1192" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="'Permission' Function Tests" executed="True" result="Success" success="True" time="0.8917" asserts="0" description="'Permission' Function Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission' Function Tests.Script '&lt;Script&gt;' is valid PowerShell" executed="True" result="Success" success="True" time="0.7478" asserts="0" description="Script '&lt;Script&gt;' is valid PowerShell">
                <results>
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psd1' is valid PowerShell" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psm1' is valid PowerShell" time="0.1076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ClassExclusionDiv.ps1' is valid PowerShell" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileList.ps1' is valid PowerShell" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-FileListDiv.ps1' is valid PowerShell" time="0.03" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-IgnoredDomainDiv.ps1' is valid PowerShell" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-MemberExclusionDiv.ps1' is valid PowerShell" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-NameExclusionDiv.ps1' is valid PowerShell" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionGroup.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionList.ps1' is valid PowerShell" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionPrtgXml.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-PermissionPrtgXml.ps1' is valid PowerShell" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\ConvertTo-ScriptHtml.ps1' is valid PowerShell" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-AccountPermissionReference.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-FlatPermissionReference.ps1' is valid PowerShell" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionAccountAccessReference.ps1' is valid PowerShell" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-ItemPermissionReference.ps1' is valid PowerShell" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Expand-TargetPermissionReference.ps1' is valid PowerShell" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ColumnJson.ps1' is valid PowerShell" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-DetailDivHeader.ps1' is valid PowerShell" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-FolderPermissionTableHeader.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlBody.ps1' is valid PowerShell" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportElements.ps1' is valid PowerShell" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-HtmlReportFooter.ps1' is valid PowerShell" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-ReportDescription.ps1' is valid PowerShell" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryDivHeader.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Get-SummaryTableHeader.ps1' is valid PowerShell" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-AccountPermissionReference.ps1' is valid PowerShell" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-ItemPermissionReference.ps1' is valid PowerShell" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Group-TargetPermissionReference.ps1' is valid PowerShell" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Memory.ps1' is valid PowerShell" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Merge-AceAndPrincipal.ps1' is valid PowerShell" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\New-PermissionCacheRef.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\New-PermissionCacheRef.ps1' is valid PowerShell" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Out-PermissionDetailReport.ps1' is valid PowerShell" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Ace.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Ace.ps1' is valid PowerShell" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Acl.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Acl.ps1' is valid PowerShell" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Folder.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-Folder.ps1' is valid PowerShell" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-FormatParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-FormatParameter.ps1' is valid PowerShell" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-GroupByParameter.ps1' is valid PowerShell" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-IdentityReferenceDomainDNS.ps1' is valid PowerShell" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Resolve-SplitByParameter.ps1' is valid PowerShell" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-AccountTableProperty.ps1' is valid PowerShell" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-ItemTableProperty.ps1' is valid PowerShell" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\private\Select-PermissionTableProperty.ps1' is valid PowerShell" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CachedCimInstance.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CachedCimInstance.ps1' is valid PowerShell" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-CacheItem.ps1' is valid PowerShell" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-PermissionCacheItem.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Add-PermissionCacheItem.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-ItemBlock.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-PermissionFqdn.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\ConvertTo-PermissionFqdn.ps1' is valid PowerShell" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-Permission.ps1' is valid PowerShell" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Expand-PermissionTarget.ps1' is valid PowerShell" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-CachedCimInstance.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-CachedCimInstance.ps1' is valid PowerShell" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ResolvedIDsWithAccess.ps1' is valid PowerShell" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Find-ServerFqdn.ps1' is valid PowerShell" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-Permission.ps1' is valid PowerShell" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Format-TimeSpan.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimInstance.ps1' is valid PowerShell" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-CachedCimSession.ps1' is valid PowerShell" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionPrincipal.ps1' is valid PowerShell" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionTrustedDomain.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionTrustedDomain.ps1' is valid PowerShell" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionWhoAmI.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-PermissionWhoAmI.ps1' is valid PowerShell" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-TimeZoneName.ps1' is valid PowerShell" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Initialize-Cache.ps1' is valid PowerShell" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionAnalyzer.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionAnalyzer.ps1' is valid PowerShell" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Invoke-PermissionCommand.ps1' is valid PowerShell" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\New-PermissionCache.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\New-PermissionCache.ps1' is valid PowerShell" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-Permission.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-Permission.ps1' is valid PowerShell" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionFile.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Out-PermissionFile.ps1' is valid PowerShell" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Remove-CachedCimSession.ps1' is valid PowerShell" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-AccessControlList.ps1' is valid PowerShell" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Resolve-PermissionTarget.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Select-PermissionPrincipal.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psd1' is valid PowerShell" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\Permission.psm1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Function.tests.ps1' is valid PowerShell" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Help.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Help.tests.ps1' is valid PowerShell" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Manifest.tests.ps1' is valid PowerShell" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Metadata.tests.ps1' is valid PowerShell" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\MetaFixers.psm1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\MetaFixers.psm1' is valid PowerShell" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Module.tests.ps1' is valid PowerShell" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1' is valid PowerShell" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\ScriptAnalyzerSettings.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\ScriptAnalyzerSettings.psd1' is valid PowerShell" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\build.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\build.ps1' is valid PowerShell" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psakeFile.ps1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psakeFile.ps1' is valid PowerShell" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psdependRequirements.psd1' is valid PowerShell" name="'Permission' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\psdependRequirements.psd1' is valid PowerShell" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="'Permission.psm1' Module Tests" executed="True" result="Success" success="True" time="1.0175" asserts="0" description="'Permission.psm1' Module Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Permission.psm1' Module Tests.Module file '&lt;ThisModule&gt;' can be imported without any errors" executed="True" result="Success" success="True" time="0.1183" asserts="0" description="Module file '&lt;ThisModule&gt;' can be imported without any errors">
                <results>
                  <test-case description="Module file 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psm1' can be imported without any errors" name="'Permission.psm1' Module Tests.Module file 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\dist\0.0.848\Permission\Permission.psm1' can be imported without any errors" time="0.1183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1" executed="True" result="Success" success="True" time="0.2079" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\Project.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="change log" executed="True" result="Success" success="True" time="0.0305" asserts="0" description="change log">
            <results>
              <test-suite type="TestFixture" name="change log.- Version" executed="True" result="Success" success="True" time="0.0248" asserts="0" description="change log.- Version">
                <results>
                  <test-case description="has a valid version" name="change log.- Version.has a valid version" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has the same version as the manifest" name="change log.- Version.has the same version as the manifest" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1" executed="True" result="Success" success="True" time="0.106" asserts="0" description="E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\tests\functions\public\Get-AccessControlList.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="'Get-AccessControlList.ps1' Function Tests" executed="True" result="Success" success="True" time="0.041" asserts="0" description="'Get-AccessControlList.ps1' Function Tests">
            <results>
              <test-suite type="ParameterizedTest" name="'Get-AccessControlList.ps1' Function Tests.Script file 'Get-AccessControlList.ps1' runs without any errors" executed="True" result="Success" success="True" time="0.0106" asserts="0" description="Script file 'Get-AccessControlList.ps1' runs without any errors">
                <results>
                  <test-case description="Script file 'Get-AccessControlList.ps1' runs without any errors" name="'Get-AccessControlList.ps1' Function Tests.Script file 'Get-AccessControlList.ps1' runs without any errors(&quot;E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1&quot;)" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="'Get-AccessControlList.ps1' Function Tests.Script '&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors" executed="True" result="Success" success="True" time="0.0244" asserts="0" description="Script '&lt;Script&gt;' can be tokenized by the PowerShell parser without any errors">
                <results>
                  <test-case description="Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' can be tokenized by the PowerShell parser without any errors" name="'Get-AccessControlList.ps1' Function Tests.Script 'E:\Owner\Documents\Google Drive\Programs\Scripts\PowerShell\Permission\src\functions\public\Get-AccessControlList.ps1' can be tokenized by the PowerShell parser without any errors" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>